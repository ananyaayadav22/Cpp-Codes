#include <bits/stdc++.h> 
class Deque
{
    int *arr;
    int front;
    int rear;
    int size;
public:

    // Initialize your data structure.
    Deque(int n)
    {
        size = n;
        arr = new int[size];
        front = rear = -1;
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        if (((rear + 1) % size == front) ||
        (front == 0 && rear == size - 1)) {
            return false;
        }
        else if(front == -1){
            front = rear = 0;
        }
        else if(front == 0){
            front = size-1;
        }
        else{
            front--;
        }
        arr[front] = x;
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        if (((rear + 1) % size == front) ||
        (front == 0 && rear == size - 1)) {
            return false;
        }
        else if(rear == -1){
            front = rear = 0;
        }
        else if(rear == size-1){
            rear = 0;
        }
        else{
            rear++;
        }
        arr[rear] = x;
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        if (front == -1) { //empty
            return -1;
        } 

        int el = arr[front]; //copy element
        //arr[front] = -1;

        // single element
        if(front == rear){  
            front = rear = -1;
        }

        //front pointer at end
        else if (front == size - 1) {
            front = 0;
        }  
        else {
            front++;
        }
        return el;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        if (rear == -1) { //empty
            return -1;
        } 

        int el = arr[rear]; //copy element
        //arr[front] = -1;

        // single element
        if(front == rear){  
            front = rear = -1;
        }

        //front pointer at end
        else if (rear == 0) {
            rear = size - 1;
        }  
        else {
            rear--;
        }
    return el;
  }


    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if (front==-1){
            return -1;
        }
        else{
            return arr[front];
        }
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        if (rear==-1){
            return -1;
        }
        else{
            return arr[rear];
        }
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        if (front == -1) { //empty
            return true;
        }
        else{
            return false;
        }
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        if (((rear + 1) % size == front) ||
        (front == 0 && rear == size - 1)) {
            return true;
        } 
        else{
            return false;
        }
    }
};

#include <iostream>
#include <queue>
using namespace std;

class node {
public:
	int data;
	node* left;
	node* right;

	node(int d) {
		this->data = d;
		this->left = NULL;
		this->right = NULL;
	}
};

node* buildTree(node* root) {

	cout<<"Enter Data:"<<endl;
	int data;
	cin>>data;
	root = new node(data);

	if (data == -1) {
		return NULL;
	}

	cout<<"Left of "<<data<<endl;
	root->left = buildTree(root->left);
	cout<<"Right of "<<data<<endl;
	root->right = buildTree(root->right);
	return root;
}

void levelOrderTraversal(node* root) {
	queue<node*> q;
	q.push(root);
	q.push(NULL);

	while(!q.empty()) {

		node* temp = q.front();
		//cout<<temp->data<<" ";
		q.pop();

		if(temp == NULL) {
			cout<<endl;
			if(!q.empty()) {
				q.push(NULL);
			}
		}
		else {
		    cout<<temp->data<<" ";
			if(temp->left) {
				q.push(temp->left);
			}
			if(temp->right) {
				q.push(temp->right);
			}
		}


	}
}

void buildFromLevelOrder(node* &root){
    queue<node*> q;
    cout<<"Enter root value: ";
    int data;
    cin>>data;
    root = new node(data);
    q.push(root);
    
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        
        cout<<"Enter left node of "<<temp->data<<": \n";
        int left;
        cin>>left;
        
        if(left !=-1){
            temp->left = new node(left);
            q.push(temp->left);
        }
        
        cout<<"Enter right node of "<<temp->data<<": \n";
        int right;
        cin>>right;
        
        if(right !=-1){
            temp->right = new node(right);
            q.push(temp->right);
        }
    }
}

int main()
{
	node* root = NULL;
	
	buildFromLevelOrder(root);
//1 3 5 7 11 17 -1 -1 -1 -1 -1 -1 -1

 	levelOrderTraversal(root);
	
	return 0;
}
